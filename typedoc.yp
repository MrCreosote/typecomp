
%start start

%{
    use Devel::StackTrace;
    use Bio::KBase::KIDL::KBT;
    use Data::Dumper;
    use File::Spec;

our @valid_authentication_values = qw(required optional none);    
our %valid_authentication_value = map { $_ => 1 } @valid_authentication_values;

our %builtin_types = ('int' => Bio::KBase::KIDL::KBT::Scalar->new(scalar_type => 'int'),
		      'string' => Bio::KBase::KIDL::KBT::Scalar->new(scalar_type => 'string'),
		      'float' => Bio::KBase::KIDL::KBT::Scalar->new(scalar_type => 'float'),
                      'UnspecifiedObject' => Bio::KBase::KIDL::KBT::UnspecifiedObject->new(),
			);

our $auth_default = 'none';

our @kidl_keywords = qw(funcdef
    		        typedef
			module
			list
			mapping
			structure
			nullable
			returns
			authentication
			tuple
			async);
our %kidl_keywords = map { $_ => 1 } @kidl_keywords;

our @kidl_reserved = qw(abstract
			and
			as
			assert
			bool
			break
			byte
			case
			catch
			char
			class
			const
			continue
			debugger
			def
			default
			del
			delete
			do
			double
			elif
			else
			enum
			except
			exec
			extends
			final
			finally
			float
			for
			from
			function
			global
			goto
			if
			implements
			import
			in
			instanceof
			int
			interface
			is
			lambda
			let
			long
			native
			new
			not
			or
			package
			pass
			print
			private
			protected
			public
			raise
			return
			short
			static
			strictfp
			super
			switch
			synchronized
			this
			throw
			throws
			transient
			try
			typeof
			var
			void
			volatile
			while
			with
			yield
			none
			required
			optional
			);
our %kidl_reserved = map { $_ => 1 } @kidl_reserved;
%}

%%


start:		module_list
	;

module_list: 	{ [] }
	|      	module_list module { [ @{$_[1]}, $_[2] ] }
	;

module:		module_opts MODULE { $_[0]->get_comment() } mod_name_def { $_[0]->set_active_module($_[4]->[1]) }  '{' module_components '}' ';'
		    {
			my $module = Bio::KBase::KIDL::KBT::DefineModule->new(options => $_[1],
					       @{$_[4]},
					       module_components => $_[7],
					       comment => $_[3]);
			$_[0]->clear_symbol_table($module->module_name);
			$module;
		    }
	;

mod_name_def:	IDENT { [ module_name => $_[1], service_name => $_[1] ] }
	|	IDENT ':' IDENT  { [ module_name => $_[3], service_name => $_[1] ] }
	;

module_opts: { [] }
	|	module_opts module_opt { [ @{$_[1]}, $_[2] ] }
	;

module_components: { [] }
	|	module_components module_component_with_doc { [ @{$_[1]}, $_[2] ] }
	;

module_component_with_doc:
		module_component
	|	DOC_COMMENT module_component { $_[2]->comment($_[1]); $_[2] }
	;

module_component:
		typedef
	|	funcdef 
	|	'use' 'module' ident ';'  ## what is this rule for? was this a first pass at includes? -mike
	|	auth_type ';' { $auth_default = $_[1]; 'auth_default' . $_[1] }
	;

auth_type: 	AUTHENTICATION IDENT { 
			       if ($valid_authentication_value{$_[2]}) 
			       {
				   $_[2];
			       }
			       else
			       {
				   $_[0]->emit_error("Invalid authentication type '" . $_[2] . "'. Valid types are " . join(" ", map { "'$_'" } @valid_authentication_values));
				   "none";
			       }
			   }
	;

#auth_type: 	AUTHENTICATION auth_kind { lc($_[2]); }
#	;

# auth_kind:	NONE
#     	|	REQUIRED
# 	|	OPTIONAL
# 	;

typedef:	TYPEDEF type IDENT { $_[0]->get_comment() }  ';' { $_[0]->define_type($_[2], $_[3], $_[4]); }
	;

funcdef:	async_flag FUNCDEF IDENT { $_[0]->get_comment() } '(' funcdef_params ')' RETURNS '(' funcdef_params ')' auth_param ';'
			{ Bio::KBase::KIDL::KBT::Funcdef->new(return_type => $_[10], name => $_[3], parameters => $_[6],
			      comment => $_[4], async => $_[1], authentication => $_[12] ); }
	|	async_flag FUNCDEF type IDENT { $_[0]->get_comment() } '(' funcdef_params ')' auth_param ';'
			{ Bio::KBase::KIDL::KBT::Funcdef->new(return_type => [$_[3]], name => $_[4], parameters => $_[7],
			      comment => $_[5], async => $_[1], authentication => $_[9]); }
	;

auth_param: { $auth_default }
	| auth_type
	;

async_flag: { 0 } 
	|     ASYNC { 1 }
	;

funcdef_params: { [] }		# empty
	|	funcdef_param { [ $_[1] ] }
	|	funcdef_params ',' funcdef_param { [ @{$_[1]}, $_[3] ] }
	;

funcdef_param: type IDENT 		{ { type => $_[1], name => $_[2] } }
	|	type 			{ { type => $_[1] } }
	;


type:		TYPENAME
	|	mapping
	|	structure
	|	list
	|	tuple
	|       IDENT '.' IDENT {
		    my $type = $_[0]->lookup_type($_[3],$_[1]);
		    if (!defined($type))
		    {
		        $_[0]->emit_error("Attempt to use undefined type '$_[3]' from module '$_[1]'");
		    }
		    $type
		}
	| 	IDENT { my $type = $_[0]->lookup_type($_[1]);
			if (!defined($type))
			{
			    $_[0]->emit_error("Attempt to use undefined type '$_[1]'");
			}
			$type }
	;

mapping:	MAPPING '<' tuple_type ',' tuple_type '>' { Bio::KBase::KIDL::KBT::Mapping->new(key_type => $_[3]->[0], value_type=> $_[5]->[0]); }
	;

structure:	STRUCTURE '{' struct_items '}' { Bio::KBase::KIDL::KBT::Struct->new(items => $_[3]); }
	;

struct_items:	struct_item { [$_[1]] }
	|	struct_items struct_item { [ @{$_[1]}, $_[2] ] }
	;

struct_item:	type IDENT ';' { Bio::KBase::KIDL::KBT::StructItem->new(item_type => $_[1], name => $_[2], nullable => 0); }
	|	type IDENT NULLABLE ';' { Bio::KBase::KIDL::KBT::StructItem->new(item_type => $_[1], name => $_[2], nullable => 1); }
	;

list:		LIST '<' type '>' { Bio::KBase::KIDL::KBT::List->new(element_type => $_[3]); }
	;

tuple:		TUPLE '<' tuple_types '>' { Bio::KBase::KIDL::KBT::Tuple->new(element_types => [ map { $_->[0] } @{$_[3]}],
							    element_names => [ map { $_->[1] } @{$_[3]}] ); }
	;

tuple_types:	tuple_type { [ $_[1] ] }
	|	tuple_types ',' tuple_type { [ @{$_[1]}, $_[3] ] }
	;

tuple_type:	type { [ $_[1], undef ] }
	|	type IDENT { [ $_[1], $_[2] ] }
	;

%% 

sub define_type
{
    my($self, $old_type, $new_type, $comment) = @_;
    my $active_module = $self->YYData->{active_module};
    my $def = Bio::KBase::KIDL::KBT::Typedef->new(name => $new_type, module => $active_module, alias_type => $old_type, comment => $comment);
    push(@{$self->YYData->{type_list}}, $def);
    $self->YYData->{type_table}->{$new_type} = $def;
    #
    # Try to name the typedefed type if it is a tuple or struct.
    #
    if($old_type) {
        if ($old_type->isa('Bio::KBase::KIDL::KBT::Struct') || $old_type->isa('Bio::KBase::KIDL::KBT::Tuple'))
        {
            $old_type->name_type($new_type);
            if ($comment)
            {
                $old_type->comment($comment);
            }
        }
        # we need to associate a module to this struct for producing json schema that can have java package information
        if ($old_type->isa('Bio::KBase::KIDL::KBT::Struct'))
        {
            $old_type->set_module($active_module);
        }
    }
    return $def;
}

# used to return the ACTIVE type list
sub types
{
    my($self) = @_;
    return $self->YYData->{type_list} || [];
}

# used to return type definitions for a specific module
sub moduletypes
{
    my($self,$module_name) = @_;
    return $self->YYData->{cached_type_lists}->{$module_name} || [];
}
sub modulelist
{
    my($self) = @_;
    return $self->YYData->{module_list};
}

sub lookup_type
{
    my($self, $name, $src_module) = @_;
    
    # if we are trying to lookup a type in an external module, then we have to
    # look in the right place
    if($src_module) {
	return $self->YYData->{cached_type_tables}->{$src_module}->{$name};
    }
    
    return $self->YYData->{type_table}->{$name};
}



#
#  provide the text string of data and a filename
#
sub parse
{
    my($self, $data, $filename) = @_;

    $self->set_active_file($data, $filename);
    my $res = $self->YYParse(yylex => \&Lexer, yyerror => \&Error);
    return ($res, $self->YYData->{error_count}, $self->YYData->{error_msg});;
}



sub set_active_file #previously named init_state
{
    my($self, $data, $filename) = @_;

    
    #
    # Initialize type table to just the builtins.
    #
    $self->YYData->{type_table} = { %builtin_types };
    $self->YYData->{INPUT} = $data;
    $self->YYData->{active_module} = '';
    $self->YYData->{line_number} = 1;
    $self->YYData->{filename} = $filename;
    $self->YYData->{error_count} = 0;
    $self->YYData->{error_msg} = '';
}


sub Error {
    my($parser) = @_;
    
    my $data = $parser->YYData;

    my $error = $data->{ERRMSG} || "Syntax error";

    $parser->emit_error($error);
}

sub emit_error {
    my($parser, $message) = @_;
    
    my $data = $parser->YYData;

    my $line = $data->{line_number};
    my $file = $data->{filename};

    my $token = $parser->YYCurtok;
    my $tval = $parser->YYCurval;

    if ($token eq 'IDENT')
    {
	$token = $tval;
    }
    
    # error messages are now sent up so that errors in the same file are grouped together
    $data->{error_msg} .= "$file:$line: $message (next token is '$token')\n";
    $data->{error_count}++;
}

sub emit_warning {
    my($parser, $message) = @_;
    
    my $data = $parser->YYData;

    my $line = $data->{line_number};
    my $file = $data->{filename};

    my $token = $parser->YYCurtok;
    my $tval = $parser->YYCurval;

    if ($token eq 'IDENT')
    {
	$token = $tval;
    }
    my $twarn = $token ? " next token is '$token'" : "";

    warn "Warning: $file:$line: $message$twarn\n";
}


sub Lexer {
    my($parser)=shift;

    my $data = $parser->YYData;
    my $bufptr = \$data->{INPUT};

    for ($$bufptr)
    {
	while ($_ ne '')
	{
	    # print "Top: '$_'\n";
	    next if (s/^[ \t]+//);
	    if (s/^\n//)
	    {
		$data->{line_number}++;
		next;
	    }
	    
	    if ($_ eq '')
	    {
		return ('', undef);
	    }
	    elsif (s/^(funcdef|typedef|module|list|mapping|structure|nullable|returns|authentication|tuple|async)\b//)
	    {
		return (uc($1), $1);
	    }
	    elsif (s/^([A-Za-z][A-Za-z0-9_]*)//)
	    {
		my $str = $1;
		if ($builtin_types{$str})
		{
		    my $type = $data->{type_table}->{$str};
		    return('TYPENAME', $type);
		}
		#elsif ($kidl_keywords{$str})
		#{
		#    return(uc($str), $str);
		#}
		#elsif ($kidl_reserved{$str})
		#{
		#    $parser->emit_warning("Use of reserved word '$str'");
		#    return('IDENT', $str);
		#}
		else
		{
		    return('IDENT', $str);
		}
	    }
	    elsif (s,^/\*(.*?)\*/,,s)
	    {
		my $com = $1;
                # we pull in the entire comment, so we need to account for newlines in the comment
                $data->{line_number}++ while($com =~ m/\n/g);
                
		if ($com =~ /^\*/)
		{
		    #
		    # It was a /** comment which is a doc-block. Return that as a token.
		    #
                    # What is this used for? -mike
		    return('DOC_COMMENT', $com);
		}
                
		my @lines = split(/\n/, $com);
		$lines[0] =~ s/^\s*//;
		my @new = ($lines[0]);
		shift @lines;
		if (@lines)
		{
		    my $l = $lines[0];
		    $l =~ s/\t/        /g;
		    my($init_ws) = $l =~ /^(\s+)/;
		    my $x = length($init_ws);
		    # print "x=$x '$lines[0]'\n";
		    for my $l (@lines)
		    {
			$l =~ s/\t/        /g;
			$l =~ s/^\s{$x}//;
			push(@new, $l);
		    }
		}
		#$parser->{cur_comment} = $com;
		$parser->{cur_comment} = join("\n", @new);
		
		# Else just elide.
	    }
	    elsif (s/^(.)//s)
	    {
		return($1,$1);
	    }
	}
    }
}

#
# Return the current comment if there is one. Always
# clear the current comment.
#
sub get_comment
{
    my($self) = @_;
    my $ret = $self->{cur_comment};
    $self->{cur_comment} = "";
    $ret =~ s/^\s+//;
    $ret =~ s/\s+$//;
    return $ret;
}



#
# as soon as we start reading a module, set it as the active module
#
sub set_active_module {
    my ($self,$module_name) = @_;
    
    # check that this module hasn't been defined already, if it has emit an error
    foreach my $m (@{$self->YYData->{module_list}}) {
        if($m eq $module_name) {
            $self->emit_error("Duplicate definition of Module '$module_name' not allowed. ".
			      " If you are compiling multiple spec files, they must be given in the proper dependency order.");
            last;
        }
    }
    # remember that we parsed this module and set it to active
    push(@{$self->YYData->{module_list}}, $module_name);
    #print STDERR "\tdebug: setting active module to $module_name\n";
    $self->YYData->{active_module} = $module_name;
}

#
# Once a module has been parsed, clear the active type table and save
# the parsed types from the parsed module for future lookups
#
sub clear_symbol_table
{
    my($self,$module_name) = @_;
    #print STDERR "\tdebug: finished parse of '$module_name' clearing symbol table\n";

    # cache the objects so we can look them up later    
    $self->YYData->{cached_type_tables}->{$module_name} = $self->YYData->{type_table};
    $self->YYData->{cached_type_lists}->{$module_name}  = $self->YYData->{type_list};
    
    # clear the type table and list, and make sure the active module is inactivated
    $self->YYData->{type_table} = { %builtin_types };
    $self->YYData->{type_list} = [];
    $self->YYData->{active_module} = '';
}


sub clear_symbol_table_cache
{
    my($self) = @_;
    
    undef %{$self->YYData->{cached_type_tables}};
    undef %{$self->YYData->{cached_type_tables}};
}

